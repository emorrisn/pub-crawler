import '../../helpers/databaseHelper.dart';

class CrawlLocationChallengeDB {
  final int id;
  final int crawlId;
  final int locationId;
  final int challengeId;

  CrawlLocationChallengeDB({
    required this.id,
    required this.crawlId,
    required this.locationId,
    required this.challengeId,
  });

  // Convert CrawlLocationChallenge object to a map
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'crawl_id': crawlId,
      'location_id': locationId,
      'challenge_id': challengeId,
    };
  }

  // Create CrawlLocationChallenge object from a map
  static CrawlLocationChallengeDB fromMap(Map<String, dynamic> map) {
    return CrawlLocationChallengeDB(
      id: map['id'],
      crawlId: map['crawl_id'],
      locationId: map['location_id'],
      challengeId: map['challenge_id'],
    );
  }

  // Insert method

  Future<int> insert({bool insertAlways = false}) async {
    // Check if insertAlways is false and if the crawl location challenge already exists in the database
    if (!insertAlways) {
      List<Map<String, dynamic>> duplicateEntries = await DatabaseHelper().getAll(
        'CrawlLocationChallenges',
        where: 'crawl_id = ? AND location_id = ? AND challenge_id = ?',
        whereArgs: [crawlId, locationId, challengeId],
      );
      if (duplicateEntries.isNotEmpty) {
        // Crawl location challenge already exists, return its ID without inserting a new one
        return duplicateEntries.first['id'] as int;
      }
    }

    // Insert the crawl location challenge into the database
    final Map<String, dynamic> data = toMap();
    data.remove('id'); // Remove the ID field to ensure it's generated by the database
    int id = await DatabaseHelper().insert('CrawlLocationChallenges', data);
    return id;
  }

  // Update method
  Future<int> update() async {
    final Map<String, dynamic> data = toMap();
    return await DatabaseHelper().update('CrawlLocationChallenges', data, id);
  }

  // Delete method
  Future<int> delete() async {
    return await DatabaseHelper().delete('CrawlLocationChallenges', id);
  }

  // Get by ID method
  static Future<CrawlLocationChallengeDB?> getById(int id) async {
    final Map<String, dynamic>? crawlLocationChallengeMap =
    await DatabaseHelper().getById('CrawlLocationChallenges', id);
    return crawlLocationChallengeMap != null ? CrawlLocationChallengeDB.fromMap(crawlLocationChallengeMap) : null;
  }

  // Get by challenge
  static Future<CrawlLocationChallengeDB?> getByChallengeID(int challengeID) async {
    final db = await DatabaseHelper().database;
    final List<Map<String, dynamic>> maps = await db.query('CrawlLocationChallenges',
        where: 'challenge_id = ?',
        whereArgs: [challengeID]);
    return maps.isNotEmpty ? CrawlLocationChallengeDB.fromMap(maps.first) : null;
  }

}
