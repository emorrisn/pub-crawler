import 'package:pub_hopper_app/models/City.dart';
import 'package:pub_hopper_app/models/Location.dart';
import 'package:pub_hopper_app/models/LocationChallenge.dart';
import 'package:pub_hopper_app/models/database_models/CrawlLocationDB.dart';

import 'database_models/ChallengeDB.dart';
import 'database_models/CrawlDB.dart';
import 'database_models/CrawlLocationChallengeDB.dart';
import 'database_models/LocationDB.dart';

class Crawl {
  final String name;
  final String description;
  final City city;
  final bool individualChallenges;
  final bool groupChallenges;
  List<Location> locations;
  List<LocationChallenge> challenges;
  final double
      individualChallengeChance; // e.g. 50% = 50% chance a person will receive an individual challenge per new pub

  Crawl({
    required this.name,
    required this.description,
    required this.city,
    required this.individualChallenges,
    required this.groupChallenges,
    List<Location>? locations,
    List<LocationChallenge>? challenges,
    this.individualChallengeChance = 0.1,
  })  : locations = locations ?? [],
        challenges = challenges ?? [];

  // Function to save the crawl to the database and return a CrawlDB object
  Future<CrawlDB> saveToDatabase() async {

    // Check if the crawl already exists in the database based on name, city, and description
    final existingCrawl = await CrawlDB.getByDetails(name, city.name, description);
    if (existingCrawl != null) {
      // If the crawl already exists, return the existing crawl
      return existingCrawl;
    }


    // Create a CrawlDB object from the current Crawl instance
    final crawlDB = CrawlDB(
      id: 0, // Set to 0 for now since it will be generated by the database
      name: name,
      description: description,
      city: city.name,
      individualChallenges: individualChallenges,
      groupChallenges: groupChallenges,
      individualChallengeChance: individualChallengeChance,
    );


    // Insert the CrawlDB object into the database
    final int crawlId = await crawlDB.insert();

    // Save locations to database and update the crawlDB object with the assigned crawl ID
    final List<Map<int, int>> locationIds = [];
    for (final location in locations) {
      final LocationDB locationDB = await location.saveToDatabase();
      locationIds.add({location.localID: locationDB.id});
    }

    // Link locations to crawl
    for (Map<int, int> locationId in locationIds) {
      final crawlLocationDB = CrawlLocationDB(
        id: 0,
        crawlId: crawlId,
        locationId: locationId.values.first,
      );

      await crawlLocationDB.insert();
    }

    // Save challenges to database and create a link to crawl+location
    for (final locationChallenges in challenges) {
      int actualID = 0;
      // We find the ID of the location using locationId, we only have the the localID, we want to find the ID that's used in the database
      for (Map<int, int> locationId in locationIds) {
        int key = locationId.keys.first;
        if (locationChallenges.locationID.toString() == key.toString()) {
          actualID = locationId.values.first;
        }
      }

      // If we were able to find the location, then we sort out it's challenges
      if (actualID != 0) {
        // Loop through individual challenges and save each one to the database
        for (final challenge in locationChallenges.individualChallenges) {
          final ChallengeDB challengeDB = await challenge.saveToDatabase();

          // Link challenge to crawl and location
          final crawlLocationChallenge = CrawlLocationChallengeDB(
            id: 0,
            crawlId: crawlId,
            locationId: actualID,
            challengeId: challengeDB.id,
          );
          await crawlLocationChallenge.insert();
        }

        // Loop through group challenges and save each one to the database
        for (final challenge in locationChallenges.groupChallenges) {
          final ChallengeDB challengeDB = await challenge.saveToDatabase();

          // Link challenge to crawl and location
          final crawlLocationChallenge = CrawlLocationChallengeDB(
            id: 0,
            crawlId: crawlId,
            locationId: actualID,
            challengeId: challengeDB.id,
          );
          await crawlLocationChallenge.insert();
        }
      }
    }

    // Return the updated CrawlDB object with the assigned ID
    return crawlDB.copyWith(id: crawlId);
  }
}
